Terminal Battleship Planning

-fixed grid size (letters on top, numbers on side)
	- 5x5 initially
-player chooses location of ships
	-ask for point/direction
-3 ships (lengths 1, 2, 3)

Classes:
	- Grid
		- each player has one
		- Grid objects have access to the ships on it

		*instance vars*
		.int gridSize //
		.ArrayList<Ship> ships
		.2D arraylist of squares - squaresChosen 
			(T - space been picked/bombed, F - not been picked)
		.int shipsRemaining - keeps track of whole # ships not yet sunk

		*methods*
		-conventional getters and setters
		-public Boolean bomb(int x, int y) - change that square in 	
			squaresChosen to true
			-returns True when ship is hit, False for miss
			- update hasBeenSunk
			- update hasBeenHit
		-public Boolean makeShip(Ship s)
			-returns True is ship is created and placed in valid location
			- set squares to shipOn
		-public Boolean isSquareEmpty(int x, int y)


	- Square
		*instance vars*
		int x, y //x and y coordinates
		boolean hasBeenHit
		boolean hasShipOn

		*methods*
		-getters and setters

#####################
	- Ship 
		- (needs to know it's coordinates on the grid)
		- needs to know which coordinates have been bombed and which hasn't

		*instance vars*
		int size
		ArrayList<Square> squares

		Boolean hasBeenSunk //true if totally sunk

#####################

	- Driver class
		*instant vars*
		Grid user1
		Grid user2
		boolean isUser1Turn
		int user1Score
		int user2Score

		- public int[] toSquare(String str) {}
		- public void resetGame() {}
		- public void drawGrid(Grid grid) {}
		- public void takeTurn() {}
			- get user input for coordinates (check input)
			- convert those to a square in grid
			- bomb square
			- if bs false
				- isUser1Turn updated
			- drawGrid
			- check if shipsRemaining is 0, then resetGame()
		- public void placeShips() {}
			- get user input for pt and dir
			- check if valid
			- instantiate new ship
			- Ship ship = new Ship()
			- call makeShip(Ship ship)
			- x2 or loop




